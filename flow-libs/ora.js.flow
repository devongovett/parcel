/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

declare module 'ora' { // manually added

import type { SpinnerName } from "cli-spinners";

declare var npm$namespace$ora: {|
  Spinner: Class<ora$Spinner>,
  Options: Class<ora$Options>,
  PersistOptions: Class<ora$PersistOptions>,
  Ora: Class<ora$Ora>,
|};
declare interface ora$Spinner {
  +interval?: number;
  +frames: string[];
}

declare type ora$Color =
  | "black"
  | "red"
  | "green"
  | "yellow"
  | "blue"
  | "magenta"
  | "cyan"
  | "white"
  | "gray";

declare type ora$PrefixTextGenerator = () => string;

declare interface ora$Options {
  /**
   * Text to display after the spinner.
   */
  +text?: string;

  /**
   * Text or a function that returns text to display before the spinner. No prefix text will be displayed if set to an empty string.
   */
  +prefixText?: string | ora$PrefixTextGenerator;

  /**
   * Name of one of the provided spinners. See [`example.js`](https://github.com/BendingBender/ora/blob/master/example.js) in this repo if you want to test out different spinners. On Windows, it will always use the line spinner as the Windows command-line doesn't have proper Unicode support.
   * @default 'dots'
   *
   * Or an object like:
   * @example ```
   * {
   * 	interval: 80, // Optional
   * 	frames: ['-', '+', '-']
   * }
   * ```
   */
  +spinner?: SpinnerName | ora$Spinner;

  /**
   * Color of the spinner.
   * @default 'cyan'
   */
  +color?: ora$Color;

  /**
   * Set to `false` to stop Ora from hiding the cursor.
   * @default true
   */
  +hideCursor?: boolean;

  /**
   * Indent the spinner with the given number of spaces.
   * @default 0
   */
  +indent?: number;

  /**
   * Interval between each frame.
   *
   * Spinners provide their own recommended interval, so you don't really need to specify this.
   *
   * Default: Provided by the spinner or `100`.
   */
  +interval?: number;

  /**
   * Stream to write the output.
   *
   * You could for example set this to `process.stdout` instead.
   * @default process.stderr
   */
  +stream?: stream$Writable;

  /**
   * Force enable/disable the spinner. If not specified, the spinner will be enabled if the `stream` is being run inside a TTY context (not spawned or piped) and/or not in a CI environment.
   *
   * Note that `{isEnabled: false}` doesn't mean it won't output anything. It just means it won't output the spinner, colors, and other ansi escape codes. It will still log text.
   */
  +isEnabled?: boolean;

  /**
   * Disable the spinner and all log text. All output is suppressed and `isEnabled` will be considered `false`.
   * @default false
   */
  +isSilent?: boolean;

  /**
   * Discard stdin input (except Ctrl+C) while running if it's TTY. This prevents the spinner from twitching on input, outputting broken lines on `Enter` key presses, and prevents buffering of input while the spinner is running.
   *
   * This has no effect on Windows as there's no good way to implement discarding stdin properly there.
   * @default true
   */
  +discardStdin?: boolean;
}

declare interface ora$PersistOptions {
  /**
   * Symbol to replace the spinner with.
   * @default ' '
   */
  +symbol?: string;

  /**
   * Text to be persisted after the symbol.
   *
   * Default: Current `text`.
   */
  +text?: string;

  /**
   * Text or a function that returns text to be persisted before the symbol. No prefix text will be displayed if set to an empty string.
   *
   * Default: Current `prefixText`.
   */
  +prefixText?: string | ora$PrefixTextGenerator;
}

declare interface ora$Ora {
  /**
   * A boolean of whether the instance is currently spinning.
   */
  +isSpinning: boolean;

  /**
   * Change the text after the spinner.
   */
  text: string;

  /**
   * Change the text or function that returns text before the spinner. No prefix text will be displayed if set to an empty string.
   */
  prefixText: string | ora$PrefixTextGenerator;

  /**
   * Change the spinner color.
   */
  color: ora$Color;

  /**
   * Change the spinner.
   */
  spinner: SpinnerName | ora$Spinner;

  /**
   * Change the spinner indent.
   */
  indent: number;

  /**
   * Start the spinner.
   * @param text - Set the current text.
   * @returns The spinner instance.
   */
  start(text?: string): ora$Ora;

  /**
   * Stop and clear the spinner.
   * @returns The spinner instance.
   */
  stop(): ora$Ora;

  /**
   * Stop the spinner, change it to a green `✔` and persist the current text, or `text` if provided.
   * @param text - Will persist text if provided.
   * @returns The spinner instance.
   */
  succeed(text?: string): ora$Ora;

  /**
   * Stop the spinner, change it to a red `✖` and persist the current text, or `text` if provided.
   * @param text - Will persist text if provided.
   * @returns The spinner instance.
   */
  fail(text?: string): ora$Ora;

  /**
   * Stop the spinner, change it to a yellow `⚠` and persist the current text, or `text` if provided.
   * @param text - Will persist text if provided.
   * @returns The spinner instance.
   */
  warn(text?: string): ora$Ora;

  /**
   * Stop the spinner, change it to a blue `ℹ` and persist the current text, or `text` if provided.
   * @param text - Will persist text if provided.
   * @returns The spinner instance.
   */
  info(text?: string): ora$Ora;

  /**
   * Stop the spinner and change the symbol or text.
   * @returns The spinner instance.
   */
  stopAndPersist(options?: ora$PersistOptions): ora$Ora;

  /**
   * Clear the spinner.
   * @returns The spinner instance.
   */
  clear(): ora$Ora;

  /**
   * Manually render a new frame.
   * @returns The spinner instance.
   */
  render(): ora$Ora;

  /**
   * Get a new frame.
   * @returns The spinner instance text.
   */
  frame(): string;
}
declare var ora: {
  /**
   * Elegant terminal spinner.
   * @param options - If a string is provided, it is treated as a shortcut for `options.text`.
   * @example ```
   * import ora = require('ora');
   *
   * const spinner = ora('Loading unicorns').start();
   *
   * setTimeout(() => {
   * 	spinner.color = 'yellow';
   * 	spinner.text = 'Loading rainbows';
   * }, 1000);
   * ```
   */
  (options?: ora$Options | string): ora$Ora,

  /**
   * Starts a spinner for a promise. The spinner is stopped with `.succeed()` if the promise fulfills or with `.fail()` if it rejects.
   * @param action - The promise to start the spinner for.
   * @param options - If a string is provided, it is treated as a shortcut for `options.text`.
   * @returns The spinner instance.
   */
  promise(action: Promise<mixed>, options?: ora$Options | string): ora$Ora,
  ...
};
declare export default typeof ora;

}
