// @flow

declare module 'chokidar' {
  declare class FSWatcher extends events$EventEmitter {
    constructor(options: FSWatcherOptions): void;
    add(paths: string | Array<string>): void;
    on(eventName: 'addDir', callback: (path: string) => mixed): this;
    on(
      eventName: 'all',
      callback: (eventName: string, path: string) => mixed
    ): this;
    on(eventName: 'unlinkDir', callback: (path: string) => mixed): this;
    on(eventName: 'error', callback: (error: Error) => mixed): this;
    on(eventName: 'ready', callback: () => mixed): this;
    on(
      eventName: 'raw',
      callback: (eventName: string, path: string, details: any) => mixed
    ): this;
    on(eventName: string, callback: () => mixed): this;
    unwatch(paths: string | Array<string>): this;
    close(): this;
    getWatched(
      paths: string | Array<string>
    ): {[directory: string]: Array<string>};
  }

  declare type FSWatcherOptions = {|
    persistent?: boolean,
    ignored?: RegExp | string | Array<RegExp | string>,
    ignoreInitial?: boolean,
    followSymlinks?: boolean,
    cwd?: string,
    disableGlobbing?: boolean,
    usePolling?: boolean,
    interval?: number,
    binaryInterval?: number,
    useFsEvents?: boolean,
    alwaysStat?: boolean,
    depth?: ?number,
    awaitWriteFinish?:
      | boolean
      | {|stabilityThreshold?: number, pollInterval?: number|},
    ignorePermissionErrors?: boolean,
    atomic?: boolean
  |};

  declare module.exports: {
    FSWatcher: typeof FSWatcher,
    watch(paths: string | Array<string>, options: FSWatcherOptions): FSWatcher
  };
}
