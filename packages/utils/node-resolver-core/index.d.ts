/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsFileSystemOptions {
  canonicalize: (...args: any[]) => any;
  read: (...args: any[]) => any;
  isFile: (...args: any[]) => any;
  isDir: (...args: any[]) => any;
  includeNodeModules?: boolean | Array<string> | Record<string, boolean>;
}
export interface FileSystem {
  fs?: JsFileSystemOptions;
  includeNodeModules?: boolean | Array<string> | Record<string, boolean>;
  conditions?: number;
  moduleDirResolver?: (...args: any[]) => any;
  mode: number;
  entries?: number;
}
export interface ResolveOptions {
  filename: string;
  specifierType: string;
  parent: string;
}
export interface FilePathCreateInvalidation {
  filePath: string;
}
export interface FileNameCreateInvalidation {
  fileName: string;
  aboveFilePath: string;
}
export interface ResolveResult {
  resolution: unknown;
  invalidateOnFileChange: Array<string>;
  invalidateOnFileCreate: Array<
    FilePathCreateInvalidation | FileNameCreateInvalidation
  >;
  query?: string;
  sideEffects: boolean;
  error: unknown;
}
export class Resolver {
  constructor(projectRoot: string, options: FileSystem);
  resolve(options: ResolveOptions): ResolveResult;
  resolveAsync(options: ResolveOptions): Promise<unknown>;
}
